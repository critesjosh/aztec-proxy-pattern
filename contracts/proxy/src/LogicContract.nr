/* Autogenerated file, do not edit! */

use dep::std;
use dep::aztec::context::{ PrivateContext, PublicContext };
use dep::aztec::protocol_types::{
  address::AztecAddress,
  abis::function_selector::FunctionSelector,
  constants::RETURN_VALUES_LENGTH,
};

// Interface for calling LogicContract functions from a private context
struct LogicContractPrivateContextInterface {
  address: AztecAddress,
}

impl LogicContractPrivateContextInterface {
  pub fn at(address: AztecAddress) -> Self {
      Self {
          address,
      }
  }
  
  pub fn increment_public_counter(
    self,
    context: &mut PrivateContext,
    old_count: u120
  ) {
    let mut serialized_args = [0; 1];
    serialized_args[0] = old_count as Field;

    context.call_public_function(self.address, FunctionSelector::from_field(0x5b5c667e), serialized_args)
  }
  

  pub fn increment_counter(
    self,
    context: &mut PrivateContext,
    old_count: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 1];
    serialized_args[0] = old_count;

    context.call_private_function(self.address, FunctionSelector::from_field(0x3a268a16), serialized_args)
  }
  
}

// Interface for calling LogicContract functions from a public context
struct LogicContractPublicContextInterface {
  address: AztecAddress,
}

impl LogicContractPublicContextInterface {
  pub fn at(address: AztecAddress) -> Self {
      Self {
          address,
      }
  }
  
  pub fn increment_public_counter(
    self,
    context: PublicContext,
    old_count: u120
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 1];
    serialized_args[0] = old_count as Field;

    context.call_public_function(self.address, FunctionSelector::from_field(0x5b5c667e), serialized_args)
  }
  
}

