/* Autogenerated file, do not edit! */

use dep::std;
use dep::aztec::context::{ PrivateContext, PublicContext };
use dep::aztec::protocol_types::{
  address::AztecAddress,
  abis::function_selector::FunctionSelector,
  constants::RETURN_VALUES_LENGTH,
};

struct AddressUpdateAddressStruct {
  inner: Field,
}

// Interface for calling StorageContract functions from a private context
struct StorageContractPrivateContextInterface {
  address: AztecAddress,
}

impl StorageContractPrivateContextInterface {
  pub fn at(address: AztecAddress) -> Self {
      Self {
          address,
      }
  }
  
  pub fn update_public_counter(
    self,
    context: &mut PrivateContext,
    old_count: Field,
    new_count: Field
  ) {
    let mut serialized_args = [0; 2];
    serialized_args[0] = old_count;
    serialized_args[1] = new_count;

    context.call_public_function(self.address, FunctionSelector::from_field(0x20f5face), serialized_args)
  }
  

  pub fn update_address(
    self,
    context: &mut PrivateContext,
    address: AddressUpdateAddressStruct,
    value: bool
  ) {
    let mut serialized_args = [0; 2];
    serialized_args[0] = address.inner;
    serialized_args[1] = value as Field;

    context.call_public_function(self.address, FunctionSelector::from_field(0xd3825f03), serialized_args)
  }
  

  pub fn update_counter(
    self,
    context: &mut PrivateContext,
    old_count: Field,
    new_count: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 2];
    serialized_args[0] = old_count;
    serialized_args[1] = new_count;

    context.call_private_function(self.address, FunctionSelector::from_field(0x400d6919), serialized_args)
  }
  
}

// Interface for calling StorageContract functions from a public context
struct StorageContractPublicContextInterface {
  address: AztecAddress,
}

impl StorageContractPublicContextInterface {
  pub fn at(address: AztecAddress) -> Self {
      Self {
          address,
      }
  }
  
  pub fn update_public_counter(
    self,
    context: PublicContext,
    old_count: Field,
    new_count: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 2];
    serialized_args[0] = old_count;
    serialized_args[1] = new_count;

    context.call_public_function(self.address, FunctionSelector::from_field(0x20f5face), serialized_args)
  }
  

  pub fn update_address(
    self,
    context: PublicContext,
    address: AddressUpdateAddressStruct,
    value: bool
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 2];
    serialized_args[0] = address.inner;
    serialized_args[1] = value as Field;

    context.call_public_function(self.address, FunctionSelector::from_field(0xd3825f03), serialized_args)
  }
  
}

